from Interfaces import IArmsCreator
from pathlib import Path
from Helpers import ArmsHelper as ah
import re

shapes = ah.shapes
joints = ah.joints
ArmsValue = ah.ArmsValue

class OdeDrawStuffCreator(IArmsCreator.IArmsCreator):
    def __init__(self):
        self.__arms = None

    @property
    def file_extension(self):
        return "_DrawStuff.cpp"

    def CanCreate(self, fileType):
        return fileType == "--drawstuff"

    def CreateFile(self, armsDict):
        self.__arms = armsDict

        template_path = Path("Creators/templates/basic_template.txt")
        template_string = template_path.read_text()

        return template_string.format(
            create_shapes = self.__create_shapes(),
            draw_bodies = self.__draw_bodies(),
            reset_bodies = self.__reset_bodies(),
            body_variables = self.__body_variables(),
            create_joints = self.__create_joints(),
            create_non_colliding_groups = self.__create_non_colliding_groups()
        )

    def __create_shapes(self):
        result = ""

        #spheres
        if ArmsValue.sphere.value in self.__arms:
            for body in self.__arms[ArmsValue.sphere.value]:
                name = ah.get_required_value(body, ArmsValue.name.value)
                radius = ah.get_required_value(body, ArmsValue.radius.value)
                position = ah.get_required_value(body, ArmsValue.position.value)

                new_code = f"""
    //Generated by Armature
    //Create Sphere_{name}
    body_{name} = dBodyCreate(world);
    dMassSetSphere(&m, 1, {radius});
    dBodySetMass(body_{name}, &m);
    geom_{name} = dCreateSphere(0, {radius});
    dGeomSetBody(geom_{name}, body_{name});
    dBodySetPosition(body_{name}, {position[0]}, {position[1]}, {position[2]});
    dSpaceAdd(space, geom_{name});
    """
                result = f'{result}{new_code}'

        #boxes
        if 'box' in self.__arms:
            for body in self.__arms['box']:
                name = ah.get_required_value(body, ArmsValue.name.value)
                sides = ah.get_required_value(body, ArmsValue.sides.value)
                position = ah.get_required_value(body, ArmsValue.position.value)

                new_code = f"""
    //Generated by Armature
    //Create Box_{name}
    body_{name} = dBodyCreate(world);
    geom_{name} = dCreateBox(0, {sides[0]}, {sides[1]}, {sides[2]});
    dGeomSetBody(geom_{name}, body_{name});
    m.setBox(1, 1,1,1);
    dBodySetMass(body_{name}, &m);
    dBodySetPosition(body_{name}, {position[0]}, {position[1]}, {position[2]});
    dSpaceAdd(space, geom_{name});
    """

                result = f'{result}{new_code}'

        return result

    def __create_non_colliding_groups(self):
        result = ""

        if "non_colliding_groups" in self.__arms:
            groups = self.__arms["non_colliding_groups"][0]
            for group in groups:
                new_group = f"""
    //Generated by Armature
    unordered_map<dGeomID, int> no_collision_map_{group};
        """
                result = f'{result}{new_group}'
                for shape in groups[group]:
                    new_shape = f"no_collision_map_{group}[geom_{shape}] = 0;\n	"
                    result = f'{result}{new_shape}'
                result = f'{result}\n	no_collision_groups.push_back(no_collision_map_{group});\n	'
        
        return result


    def __create_joints(self):
        result = ""
        
        for joint_type in joints:
            if joint_type in self.__arms:
                for joint in self.__arms[joint_type]:
                    joint_name = ah.get_required_value(joint, ArmsValue.name.value)
                    joint_position = ah.get_required_value(joint, ArmsValue.position.value)
                    if joint_type == 'ball_and_socket':
                        #get parent and child
                        parent = ah.get_shape_by_name(ah.get_required_value(joint, ArmsValue.parent.value), self.__arms)
                        child = ah.get_shape_by_name(ah.get_required_value(joint, ArmsValue.child.value), self.__arms)
                        #get their positions and names
                        parent_position = ah.get_required_value(parent, ArmsValue.position.value)
                        parent_name = ah.get_required_value(parent, ArmsValue.name.value)
                        child_position = ah.get_required_value(child, ArmsValue.position.value)
                        child_name = ah.get_required_value(child, ArmsValue.name.value)

                        new_joint = f"""
        //Generated by Armature
        dJointID {joint_name} = dJointCreateBall(world, 0);
        dJointAttach({joint_name}, body_{parent_name}, body_{child_name});
        dJointSetBallAnchor({joint_name}, {joint_position[0]}, {joint_position[1]}, {joint_position[2]});
        """
                        result = f'{result}{new_joint}'


        return result

    def __body_variables(self):
        result = ""

        #spheres
        if ArmsValue.sphere.value in self.__arms:
            for body in self.__arms[ArmsValue.sphere.value]:
                new_body = f"""
//Gernerated by Armature
static dBodyID body_{body[ArmsValue.name.value]};
static dGeomID geom_{body[ArmsValue.name.value]};
    """
                result = f'{result}{new_body}'

        #boxes
        if 'box' in self.__arms:
            for body in self.__arms['box']:
                sides = ah.get_required_value(body, ArmsValue.sides.value)

                new_body = f"""
//Gernerated by Armature
static dBodyID body_{body[ArmsValue.name.value]};
static dGeomID geom_{body[ArmsValue.name.value]};
const float sides_{body[ArmsValue.name.value]}[3] = {{ {sides[0]}, {sides[1]}, {sides[2]} }};
    """
                result = f'{result}{new_body}'

        return result

    def __reset_bodies(self):
        result = ""
        
        #spheres
        if ArmsValue.sphere.value in self.__arms:
            for body in self.__arms[ArmsValue.sphere.value]:
                name = ah.get_required_value(body, ArmsValue.name.value)
                position = ah.get_required_value(body, ArmsValue.position.value)

                new_code = f"""
    //Generated by Armature
    dQuaternion q{name};
    dQSetIdentity(q{name});
    dBodySetPosition(body_{name}, {position[0]}, {position[1]}, {position[2]});
    dBodySetQuaternion(body_{name}, q{name});
    dBodySetLinearVel(body_{name}, 0, 0, 0);
    dBodySetAngularVel(body_{name}, 0, 0, 0);
        """

                result = f'{result}{new_code}'

        #boxes
        if 'box' in self.__arms:
            for body in self.__arms['box']:
                name = ah.get_required_value(body, ArmsValue.name.value)
                position = ah.get_required_value(body, ArmsValue.position.value)

                new_code = f"""
    //Generated by Armature
    dBodySetPosition(body_{name}, {position[0]}, {position[1]}, {position[2]});
    dBodySetLinearVel(body_{name}, 0, 0, 0);
    dBodySetAngularVel(body_{name}, 0, 0, 0);
    """

                result = f'{result}{new_code}'
        
        return result

    def __draw_bodies(self):
        result = ""

        #spheres
        if ArmsValue.sphere.value in self.__arms:
            for body in self.__arms[ArmsValue.sphere.value]:
                name = ah.get_required_value(body, ArmsValue.name.value)
                color = ah.get_optional_value(body, ArmsValue.color.value)
                radius = ah.get_required_value(body, ArmsValue.radius.value)

                new_code = f"""
    //Generated by Armature
    dsSetColor({color[0]}, {color[1]}, {color[2]});
    const dReal *SPos_{name} = dBodyGetPosition(body_{name});
    const dReal *SRot_{name} = dBodyGetRotation(body_{name});
    float spos_{name}[3] = {{ SPos_{name}[0], SPos_{name}[1], SPos_{name}[2] }};
    float srot_{name}[12] = {{ SRot_{name}[0], SRot_{name}[1], SRot_{name}[2], SRot_{name}[3], SRot_{name}[4], SRot_{name}[5], SRot_{name}[6], SRot_{name}[7], SRot_{name}[8], SRot_{name}[9], SRot_{name}[10], SRot_{name}[11] }};
    dsDrawSphere
    (
        spos_{name},
        srot_{name},
        {radius}
    );
    """

                result = f'{result}{new_code}'
        
        #boxes
        if 'box' in self.__arms:
            for body in self.__arms['box']:
                name = ah.get_required_value(body, ArmsValue.name.value)
                color = ah.get_optional_value(body, ArmsValue.color.value)
                sides = ah.get_required_value(body, ArmsValue.sides.value)

                new_code = f"""
    //Generated by Armature
    dsSetColor({color[0]}, {color[1]}, {color[2]});
    dsDrawBox(dBodyGetPosition(body_{name}),
    dBodyGetRotation(body_{name}), sides_{name});
    """

                result = f'{result}{new_code}'

        return result

